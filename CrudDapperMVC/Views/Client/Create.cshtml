@model CrudDapperMVC.Model.Client

@{
    ViewBag.Title = "Create";
}

<hr />

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="row">
            <div class="col-md-6 mb-3">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "" })
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-6 mb-3">
                @Html.LabelFor(model => model.CPF, htmlAttributes: new { @class = "" })
                @Html.EditorFor(model => model.CPF, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CPF, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6 mb-3">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "" })
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-6 mb-3">
                @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "" })
                @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6 mb-3">
                @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "" })
                @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control", onblur = "pesquisacep(this.value);" } })
                @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-6 mb-3">
                @Html.LabelFor(model => model.Street, htmlAttributes: new { @class = "" })
                @Html.EditorFor(model => model.Street, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Street, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6 mb-3">
                @Html.LabelFor(model => model.Number, htmlAttributes: new { @class = "" })
                @Html.EditorFor(model => model.Number, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Number, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-6 mb-3">
                @Html.LabelFor(model => model.AddressComplement, htmlAttributes: new { @class = "" })
                @Html.EditorFor(model => model.AddressComplement, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AddressComplement, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6 mb-3">
                @Html.LabelFor(model => model.Neighborhood, htmlAttributes: new { @class = "" })
                @Html.EditorFor(model => model.Neighborhood, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Neighborhood, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-6 mb-3">
                @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "" })
                @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6 mb-3">
                @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "" })
                @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6 mb-3">
                @Html.LabelFor(model => model.Active, htmlAttributes: new { @class = "" })
                @Html.EditorFor(model => model.Active)
                @Html.ValidationMessageFor(model => model.Active, "", new { @class = "text-danger" })
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-md-6 mb-3">
                <div class="form-group">
                    @Html.ActionLink("Voltar à lista", "Index", null, null, new { @class = "btn btn-warning" })
                    <button type="submit" class="btn btn-primary">Salvar</button>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
